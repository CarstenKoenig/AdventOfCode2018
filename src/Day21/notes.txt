#ip 1
0  seti 123 0 5            reg[5] = 123
1  bani 5 456 5            reg[5] = reg[5] &&& 456
2  eqri 5 72 5             reg[5] = 1 falls 123 &&& 456 == 17 else 0 
3  addr 5 1 1              reg[1] = JUMP 5 falls 123 &&& 456 == 17 else JUMP 4
4  seti 0 0 1              JUMP 2



5  seti 0 2 5              reg[5] = 0
6  bori 5 65536 4          reg[4] = reg[5] ||| 16 1-bits                             1 0000 0000 0000 0000  => reg[5] with bit 17 set to 1
7  seti 3935295 1 5        reg[5] = 3935295                                          00     11 1100 0000 1100 0011 1111
8  bani 4 255 2            reg[2] = last 8 bits reg[4] (last 8 bits of old reg[5])
9  addr 5 2 5              reg[5] += reg[2]  (= last 8 bits of old reg[5] + number above ^)
10 bani 5 16777215 5       reg[5] = reg[5] &&& 16777215  = mask reg[5] to 1111 1111 1111 1111 1111 1111
11 muli 5 65899 5          reg[5] *= 65899 // 0001 0000 0001 0110 1011
12 bani 5 16777215 5       reg[5] = reg[5] &&& 16777215  = mask reg[5] again
13 gtir 256 4 2            reg[2] = 1 falls 256 > reg[4] sonst 0     (
14 addr 2 1 1              falls 256 > reg[4] JUMP 28 sonst reg[1] ++ && JUMP 17
15 addi 1 1 1               
16 seti 27 1 1             
17 seti 0 5 2              reg[2] = 0
18 addi 2 1 3              reg[3] = reg[2] + 1 (inc bit 0)
19 muli 3 256 3            reg[3] *= 256
20 gtrr 3 4 3              reg[3] = 1 falls reg[3] > reg[4] sonst 0
21 addr 3 1 1              if reg[3] > reg[4] then reg[4] = reg[2] && JUMP 8 else reg[2]++ && JUMP 18
22 addi 1 1 1              
23 seti 25 0 1             
24 addi 2 1 2              
25 seti 17 7 1             
26 setr 2 2 4              
27 seti 7 6 1              
28 eqrr 5 0 2              reg[2] = 1 falls reg[5] = reg[0]
29 addr 2 1 1              falls reg[5] = reg[0] JUMP 31 sonst JUMP 30
30 seti 5 4 1              JUMP 6
